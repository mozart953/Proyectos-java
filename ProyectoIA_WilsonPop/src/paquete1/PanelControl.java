/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Wilson Pop
 */
public class PanelControl extends javax.swing.JFrame {

    Procedimientos instancia = new Procedimientos();
    int costes[] = new int[4];
    int contador = 0;
    String matrizInicial[][] = new String[3][3];
    String matrizArriba[][] = new String[3][3];
    String matrizAbajo[][] = new String[3][3];
    String matrizDerecha[][] = new String[3][3];
    String matrizIzquierda[][] = new String[3][3];
    String matrizDestino[][] = {
        {"1", "2", "3"},
        {"4", "5", "6"},
        {"7", "8", ""}
    };
    
    
    public PanelControl() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBtn1 = new javax.swing.JButton();
        jBtn2 = new javax.swing.JButton();
        jBtn3 = new javax.swing.JButton();
        jBtn4 = new javax.swing.JButton();
        jBtn5 = new javax.swing.JButton();
        jBtn6 = new javax.swing.JButton();
        jBtn7 = new javax.swing.JButton();
        jBtn8 = new javax.swing.JButton();
        jBtn0 = new javax.swing.JButton();
        jBtnResolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBtnAleatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(950, 675));

        jPanel1.setBackground(new java.awt.Color(0, 51, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 500));

        jBtn1.setBackground(new java.awt.Color(255, 255, 255));
        jBtn1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn1.setText("1");
        jBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn1ActionPerformed(evt);
            }
        });

        jBtn2.setBackground(new java.awt.Color(255, 255, 255));
        jBtn2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn2.setText("2");
        jBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn2ActionPerformed(evt);
            }
        });

        jBtn3.setBackground(new java.awt.Color(255, 255, 255));
        jBtn3.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn3.setText("3");
        jBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn3ActionPerformed(evt);
            }
        });

        jBtn4.setBackground(new java.awt.Color(255, 255, 255));
        jBtn4.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn4.setText("4");
        jBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn4ActionPerformed(evt);
            }
        });

        jBtn5.setBackground(new java.awt.Color(255, 255, 255));
        jBtn5.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn5.setText("5");
        jBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn5ActionPerformed(evt);
            }
        });

        jBtn6.setBackground(new java.awt.Color(255, 255, 255));
        jBtn6.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn6.setText("6");
        jBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn6ActionPerformed(evt);
            }
        });

        jBtn7.setBackground(new java.awt.Color(255, 255, 255));
        jBtn7.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn7.setText("7");
        jBtn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn7ActionPerformed(evt);
            }
        });

        jBtn8.setBackground(new java.awt.Color(255, 255, 255));
        jBtn8.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn8.setText("8");
        jBtn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn8ActionPerformed(evt);
            }
        });

        jBtn0.setBackground(new java.awt.Color(255, 255, 255));
        jBtn0.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn0ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn7, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtn8, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtn0, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jBtn3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtn6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtn7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn8, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn0, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jBtnResolver.setBackground(new java.awt.Color(0, 255, 102));
        jBtnResolver.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtnResolver.setText("Resolver");
        jBtnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnResolverActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Proyecto 1 - IA - Wilson Pop");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(164, 164, 164))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
        );

        jBtnAleatorio.setBackground(new java.awt.Color(255, 204, 0));
        jBtnAleatorio.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jBtnAleatorio.setText("Aleatorio");
        jBtnAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAleatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnResolver)
                            .addComponent(jBtnAleatorio))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jBtnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jBtnAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jBtnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnResolverActionPerformed
        PrimeroElMejor();// se llama a la método necesario
    }//GEN-LAST:event_jBtnResolverActionPerformed

    private void jBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn1ActionPerformed
        instancia.VerificarLugarVacio(jBtn1, jBtn2);//el uno verifica si hay un lugar vacio en dos
        instancia.VerificarLugarVacio(jBtn1, jBtn4);// el uno verifica si hay un lugar vacio en cuatro
    }//GEN-LAST:event_jBtn1ActionPerformed

    private void jBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn2ActionPerformed
        instancia.VerificarLugarVacio(jBtn2, jBtn1);//el dos verifica si hay un lugar vacio en uno
        instancia.VerificarLugarVacio(jBtn2, jBtn3);//el dos verifica si hay un lugar vacio en tres
        instancia.VerificarLugarVacio(jBtn2, jBtn5);//el dos vrifica si hay un lugar vacio en cinco
    }//GEN-LAST:event_jBtn2ActionPerformed

    private void jBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn3ActionPerformed
        instancia.VerificarLugarVacio(jBtn3, jBtn2);//el tres verifica si hay un lugar vacio en dos
        instancia.VerificarLugarVacio(jBtn3, jBtn6);//el tres verifica si hay un lugar vacio en seis 
    }//GEN-LAST:event_jBtn3ActionPerformed

    private void jBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn4ActionPerformed
        instancia.VerificarLugarVacio(jBtn4, jBtn1);//el cuatro verifica si hay un lugar vacio en uno
        instancia.VerificarLugarVacio(jBtn4, jBtn5);//el cuatro verifica si hay un lugar vacio en cinco
        instancia.VerificarLugarVacio(jBtn4, jBtn7);//el cuatro verifica si hay un lugar vacio en siete
    }//GEN-LAST:event_jBtn4ActionPerformed

    private void jBtn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn5ActionPerformed
        instancia.VerificarLugarVacio(jBtn5, jBtn2);//el cinco verifica si hay un lugar vacio en dos
        instancia.VerificarLugarVacio(jBtn5, jBtn6);//el cinco verifica si hay un lugar vacio en seis
        instancia.VerificarLugarVacio(jBtn5, jBtn4);//el cinco verifica si hay un lugar vacio en cuatro
        instancia.VerificarLugarVacio(jBtn5, jBtn8);//el cinco verifica si hay un lugar vacio en ocho
    }//GEN-LAST:event_jBtn5ActionPerformed

    private void jBtn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn6ActionPerformed
        instancia.VerificarLugarVacio(jBtn6, jBtn3);//el seis verifica si hay un lugar vacio en tres
        instancia.VerificarLugarVacio(jBtn6, jBtn5);//el seis verifica si hay un lugar vacio en cinco
        instancia.VerificarLugarVacio(jBtn6, jBtn0);//el seis verifica si hay un lugar vacio en cero
    }//GEN-LAST:event_jBtn6ActionPerformed

    private void jBtn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn7ActionPerformed
        instancia.VerificarLugarVacio(jBtn7, jBtn4);//el siete verifica si hay un lugar vacio en cuatro
        instancia.VerificarLugarVacio(jBtn7, jBtn8);//el siete verifica si hay un lugar vacio en ocho
    }//GEN-LAST:event_jBtn7ActionPerformed

    private void jBtn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn8ActionPerformed
        instancia.VerificarLugarVacio(jBtn8, jBtn5);//el ocho verifica si hay un lugar vacio en cinco
        instancia.VerificarLugarVacio(jBtn8, jBtn0);//el ocho verifica si hay un lugar vacio en cero
        instancia.VerificarLugarVacio(jBtn8, jBtn7);//el ocho verifica si hay un lugar vacio en siete
    }//GEN-LAST:event_jBtn8ActionPerformed

    private void jBtn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn0ActionPerformed
        instancia.VerificarLugarVacio(jBtn0, jBtn6);//el cero verifica si hay un lugar vacio en seis
        instancia.VerificarLugarVacio(jBtn0, jBtn8);//el cero verifica si hay un lugar vacio en ocho
    }//GEN-LAST:event_jBtn0ActionPerformed

    private void jBtnAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAleatorioActionPerformed
        OrdenacionAleatoria();
    }//GEN-LAST:event_jBtnAleatorioActionPerformed

    //Este método es el principal, llama a los métodos necesarios para el cálculo de los nodos
    public void PrimeroElMejor() {
        InicializarMatriz();
   
        //Si el valor es true al consultar entonces las dos matrices son iguales
        if (!instancia.CompararMatriz(matrizInicial, matrizDestino)) { 
            JOptionPane.showMessageDialog(rootPane, "Solucionado..");// si la matriz inical y final son iguales se determina que ya está solucionado
        } else {
            JOptionPane.showMessageDialog(rootPane, "No solucionado"); // de lo contrario se determina que no está solucionado y se llaman a los métodos de cálculo
            
            ArrayList<Nodos> hijos2= new ArrayList<Nodos>();//Lista que almacena los hijos que son parte de la solucion optima
            //Nodos acumulador = new Nodos(matrizInicial);
            int conta = 0; //contador
            int a=0; // se utiliza para almacenar el valor del contador menos uno ya que se empieza por el ultimo indice
            int contador2=0;//se utiliza para contar los pasos que se necesitaron para la solucion
            
            Nodos nodoInicial = new Nodos(matrizInicial);//Se inicializa el nodo con la matriz inicial
            //DeterminarSolucion(nodoInicial, matrizDestino);
            Nodos solucion=DeterminarSolucion(nodoInicial, matrizDestino);// se envia la la matriz inicial y la matriz destino al método de verificacion
                 
            
            while(solucion.padre!=null){
               // ImprimirEstado(solucion.getEstado());
                hijos2.add(solucion);
                System.out.println("----------------------------------");
                solucion = solucion.padre;
                conta++;
            } 
            
            a = conta-1;
            
            while (a>=0){
                contador2++;
                imprimirPantalla(hijos2.get(a).getEstado());
                JOptionPane.showMessageDialog(rootPane, "Paso No.: " +contador2);
                a=a-1;
                
            }
            
        }
    }

    //método para determinar la solución a partir de comparaciones y asignación nuevos arreglos como nodos
    public Nodos DeterminarSolucion(Nodos inicio, String[][] solucion) {
        ArrayList<Nodos> expandidos = new ArrayList<Nodos>();//se declara un arraylist de tipo nodo para almacenar los nodos
        ArrayList<Nodos> visitados = new ArrayList<Nodos>();// se declar un arrayList de tipo nodo para almacenar nodos visitados
        expandidos.add(inicio);//se agrega el array inicial inicial a la lista
        //String matriz [][] = new String[solucion.length][solucion.length];

        while (expandidos.size() != 0) {//el while se termina de ejecutar hasta que el numero de expandidos es 0
            Nodos revisar = expandidos.remove(0);//se remueve el último anterior
            ImprimirEstado(revisar.getEstado());//se imprime el estado actual
            //JOptionPane.showMessageDialog(rootPane, "break");

            int posiconarCero[] = RevisarPosCero(revisar.getEstado());//se revisa la posicion del espacio vacio de la matriz actual
            
            if(Arrays.deepEquals(revisar.getEstado(), solucion)){// si el estado del nodo actual es igual a la solucion entonces se termina la ejecucion
                //break;              
               return revisar;//envia los nodos acumulados
            }
            
            ArrayList<Nodos> hijos= new ArrayList<Nodos>(); //lista para añadir a los nodos hijos 
            visitados.add(revisar);
            
            if(posiconarCero[0]!=0){ //mover arriba
                Nodos hijo = new Nodos(Clon(revisar.getEstado()));// se llama a un metodo para clonar al nodo actual para no perderlo
                String arriba = hijo.getEstado()[posiconarCero[0]-1][posiconarCero[1]];// se almacena el valor actual una casilla arriba
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]]=arriba;// se pociona el valor anterior a una casilla vacia
                hijo.getEstado()[posiconarCero[0]-1][posiconarCero[1]]="";// se cambia el valor de la casilla vacia a una casilla hacia abajo
                if(!HVisitados(visitados,hijo)){//se llama el metodo de visitados para descartar los nodos repetidos
                    expandidos.add(hijo);//si cumple que ya no es repetido entonces almacena el hijo en la lista de expandidos
                    hijos.add(hijo);// se añade a la lista de nodos hijos
                }
                //hijos.add(hijo);
                
                
            }
            //se repite el proceso anterior pero con las posiciones abajo, izquierda y derecha
            
            if(posiconarCero[0]!=2){ //mover abajo
                Nodos hijo = new Nodos(Clon(revisar.getEstado()));
                String abajo = hijo.getEstado()[posiconarCero[0]+1][posiconarCero[1]];
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]]=abajo;
                hijo.getEstado()[posiconarCero[0]+1][posiconarCero[1]]="";
                if(!HVisitados(visitados,hijo)){
                    expandidos.add(hijo);
                    hijos.add(hijo);
                }
                //hijos.add(hijo);
                
            }
            
            if(posiconarCero[1]!=0){ //mover izquieda
                Nodos hijo = new Nodos(Clon(revisar.getEstado()));
                String izquierda = hijo.getEstado()[posiconarCero[0]][posiconarCero[1]-1];
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]]=izquierda;
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]-1]="";
                if(!HVisitados(visitados,hijo)){
                    expandidos.add(hijo);
                    hijos.add(hijo);
                }
                //hijos.add(hijo);
                
            }
            
            if(posiconarCero[1]!=2){ //mover derecha
                Nodos hijo = new Nodos(Clon(revisar.getEstado()));
                String derecha = hijo.getEstado()[posiconarCero[0]][posiconarCero[1]+1];
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]]=derecha;
                hijo.getEstado()[posiconarCero[0]][posiconarCero[1]+1]="";
                if(!HVisitados(visitados,hijo)){
                    expandidos.add(hijo);
                    hijos.add(hijo);
                }
                //hijos.add(hijo);
                
            }
            revisar.setHijos(hijos);//la lista de hijos de agrega a el nodo revisar
        }
        return null;
    }

    private int[] RevisarPosCero(String[][] estado) {
        int pos [] = new int [2];
        
        for (int i = 0; i < estado.length; i++) {
            for (int j = 0; j < estado.length; j++) {
                if(estado[i][j]==""){
                    pos[0]=i;
                    pos[1]=j;
                }
            }
        }
        System.out.println(pos[0] + " " + pos[1]);
        return pos;
    }

    public void ImprimirEstado(String[][] estado) {
        String auxiliar = "";
        for (int i = 0; i < estado.length; i++) {
            for (int j = 0; j < estado.length; j++) {
                System.out.print("|" + estado[i][j] + "|");
      
            }
            System.out.println("");
        }
        
        /*jBtn1.setText(estado[0][0]);
        jBtn2.setText(estado[0][1]);
        jBtn3.setText(estado[0][2]);
        jBtn4.setText(estado[1][0]);
        jBtn5.setText(estado[1][1]);
        jBtn6.setText(estado[1][2]);
        jBtn7.setText(estado[2][0]);
        jBtn8.setText(estado[2][1]);
        jBtn0.setText(estado[2][2]);*/
    }
    
    public void imprimirPantalla(String[][] estado){
        jBtn1.setText(estado[0][0]);
        jBtn2.setText(estado[0][1]);
        jBtn3.setText(estado[0][2]);
        jBtn4.setText(estado[1][0]);
        jBtn5.setText(estado[1][1]);
        jBtn6.setText(estado[1][2]);
        jBtn7.setText(estado[2][0]);
        jBtn8.setText(estado[2][1]);
        jBtn0.setText(estado[2][2]);
        
    }
    
    private String[][] Clon(String[][] estado) {
        String [][] clon = new String [estado.length][estado.length];
        for (int i = 0; i < estado.length; i++) {
            for (int j = 0; j < estado.length; j++) {
                clon[i][j] = estado[i][j];
            }
        }
        
        return clon;
    }
    
    private boolean HVisitados(ArrayList<Nodos> visitados, Nodos hijo) {
        for(Nodos v:visitados){
            if(Arrays.deepEquals(v.getEstado(), hijo.getEstado())){
                return true;
            }
        }
        
        return false;
    }

    public void VerificarLugarVacio2(String MatrizI[][]) {
        int numero = 0; // agregar el numero verificado a un String

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (MatrizI[i][j] == "") {
                    if ((j + 1) < 3) { //Derecha 1
                        matrizDerecha = matrizInicial;
                        matrizDerecha[i][j + 1] = "";
                        matrizDerecha[i][j] = MatrizI[i][j + 1];
                        costes[0] = instancia.CompararMatriz2(matrizDerecha, matrizDestino); //se asigna el coste dependiendo
                    } else if ((i + 1) < 3) {//Abajo 2
                        matrizAbajo = matrizInicial;
                        matrizAbajo[i + 1][j] = "";
                        matrizAbajo[i][j] = MatrizI[i + 1][j];
                        costes[1] = instancia.CompararMatriz2(matrizAbajo, matrizDestino);
                    } else if ((j - 1) > -1) {//Izquierda 3
                        matrizIzquierda = matrizInicial;
                        matrizIzquierda[i][j - 1] = "";
                        matrizIzquierda[i][j] = MatrizI[i][j - 1];
                        costes[2] = instancia.CompararMatriz2(matrizIzquierda, matrizDestino);
                    } else if ((i - 1) > -1) {//Arriba 4
                        matrizArriba = matrizInicial;
                        matrizArriba[i - 1][j] = "";
                        matrizArriba[i][j] = MatrizI[i - 1][j];
                        costes[3] = instancia.CompararMatriz2(matrizArriba, matrizDestino);
                    }
                }
            }
        }

    }

    public void DeterminarCosto() {
        for (int cont = 0; cont < 4; cont++) {
            if (costes[cont] != 0) {
                if (costes[cont] == 1) {
                    matrizInicial = matrizDerecha;
                }
            }
        }
    }

    //metodo para capturar los valores actuales desde cada boton y asignar los valores a cada indice de la matriz inicial
    public void InicializarMatriz() {
        matrizInicial[0][0] = jBtn1.getText();
        matrizInicial[0][1] = jBtn2.getText();
        matrizInicial[0][2] = jBtn3.getText();
        matrizInicial[1][0] = jBtn4.getText();
        matrizInicial[1][1] = jBtn5.getText();
        matrizInicial[1][2] = jBtn6.getText();
        matrizInicial[2][0] = jBtn7.getText();
        matrizInicial[2][1] = jBtn8.getText();
        matrizInicial[2][2] = jBtn0.getText();
    }

    public void OrdenacionAleatoria() {
        int[] BotonNumeros = new int[9]; // se crea un array de longitud 9
        int a; // se inicializa la variable que ira aumentando su cantidad para cubrir el array
        int b;// se inicializa la variable para for
        int revisorFilas = 0; // variable que servira para asignar variables aleatorios 
        boolean verificador = false; // variable que servira para determinar si los valores se parecen o no

        a = 1;

        do { // este ciclo servira para realizar el procedimiento de asignación de números aleatorios a cada indice del array
            Random random = new Random(); // Se instancia el método Random para posteriormente buscar un valor aleatorio
            revisorFilas = random.nextInt((8) + 1); // se asigna un valor aloreatorio del uno al ocho

            for (b = 1; b <= a; b++) {

                if (BotonNumeros[b] == revisorFilas) { // se revisa si dos numeros son iguales 
                    verificador = true;
                    break;// si son iguales solamente se sale del if
                }
            }

            if (verificador == true) {// si se encuentra que dos números son iguales simplemente se vuelve falso al verificador 
                verificador = false;// cuando el verificador es falso significa que se debe volver a realizar el proceso
            } else {
                BotonNumeros[a] = revisorFilas;//de lo contrario se asigna al indice actual del array de numeros
                a = a + 1;// se incrementa el valor de la variable
            }

        } while (a <= 8);//el bucle termina cuando el valor es igual a ocho

        //se asignan los valores a cada boton dependiendo del indice
        jBtn1.setText(Integer.toString(BotonNumeros[1]));
        jBtn2.setText(Integer.toString(BotonNumeros[2]));
        jBtn3.setText(Integer.toString(BotonNumeros[3]));
        jBtn4.setText(Integer.toString(BotonNumeros[4]));
        jBtn5.setText(Integer.toString(BotonNumeros[5]));
        jBtn6.setText(Integer.toString(BotonNumeros[6]));
        jBtn7.setText(Integer.toString(BotonNumeros[7]));
        jBtn8.setText(Integer.toString(BotonNumeros[8]));
        jBtn0.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelControl().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jBtn0;
    public static javax.swing.JButton jBtn1;
    public static javax.swing.JButton jBtn2;
    public static javax.swing.JButton jBtn3;
    public static javax.swing.JButton jBtn4;
    public static javax.swing.JButton jBtn5;
    public static javax.swing.JButton jBtn6;
    public static javax.swing.JButton jBtn7;
    public static javax.swing.JButton jBtn8;
    private javax.swing.JButton jBtnAleatorio;
    private javax.swing.JButton jBtnResolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

   

  

}
