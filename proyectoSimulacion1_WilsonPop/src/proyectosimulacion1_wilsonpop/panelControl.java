/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectosimulacion1_wilsonpop;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Wilson Pop
 */
public class panelControl extends javax.swing.JFrame {

    distrucionBinomial obj = new distrucionBinomial();
    distHiper obj1 = new distHiper();
    //distPoisson dist = new distPoisson();

    int Npob = 0;
    int numeroExperimentos = 0;
    int numeroAciertos = 0;
    double probabilidad = 0;
    String acumulador = "";
    double valoresProb[];
    double a[];
    double valorProb1[];
    double valorProb2[];
    double valorProb3[];
    String acumulador2 = "";
    String acumulador3 = "";
    boolean interruptor = false;
    int xva1 = 0;
    int xv2 = 0;
    double probabilidadAcumulada = 0;
    double FactorCorreccion = 0;
    double Desviacion = 0;
    double curtosis = 0;
    double sesgo = 0;
    String determinarCur = "";
    String determinarSes = "";
    double mediana = 0;
    double media = 0;
    String tipoSesgo = "";
    int intervalo[];
    int k = 0;
    String titulo = "";

    DefaultTableModel modelo1 = new DefaultTableModel(); // tabla 

    public panelControl() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        String[] titulo = new String[]{"x", "P(x)%","q%"};
        modelo1.setColumnIdentifiers(titulo);
        Tabla1.setModel(modelo1);

        SpinnerNumberModel val = new SpinnerNumberModel();
        val.setMaximum(100);
        val.setMinimum(0);
        val.setStepSize(1);
        tolerancia.setModel(val);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        boton = new javax.swing.JButton();
        n = new javax.swing.JTextField();
        x = new javax.swing.JTextField();
        p = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Lista = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtext2 = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        x1 = new javax.swing.JTextField();
        poblacion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtext3 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        K1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        distribuciones = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tabla1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        tolerancia = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        x2 = new javax.swing.JTextField();
        checkBP = new javax.swing.JCheckBox();
        checkHP = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        boton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        boton.setText("Calcular");
        boton.setEnabled(false);
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        n.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        n.setEnabled(false);

        x.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        x.setEnabled(false);

        p.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        p.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("n");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("x");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("p");

        Lista.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Lista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Población infinita", "Población infinita (n,p)", "Población finita" }));
        Lista.setEnabled(false);
        Lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListaActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Probabilidades:");

        jScrollPane2.setViewportView(jtext2);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Cálculos - población infinita:");

        x1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        x1.setEnabled(false);

        poblacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        poblacion.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("N");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("x1");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("x2");

        jtext3.setColumns(20);
        jtext3.setRows(5);
        jScrollPane3.setViewportView(jtext3);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Cálculos- población finita:");

        K1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        K1.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("K");

        distribuciones.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        distribuciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Distribución binomial", "Distribución hipergeométrica" }));
        distribuciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distribucionesActionPerformed(evt);
            }
        });

        Tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Tabla1);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Por lotes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Toleracia Porcentual");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Comparar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Vaciar campos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("Regresar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        x2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        x2.setEnabled(false);

        checkBP.setText("Binomial/Poisson");
        checkBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBPActionPerformed(evt);
            }
        });

        checkHP.setText("Hipergeometrica/Poisson");
        checkHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkHPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(tolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(jLabel10))
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(K1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(3, 3, 3))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(8, 8, 8)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel1)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(poblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(checkBP)
                            .addComponent(checkHP))))
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(distribuciones, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(Lista, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jButton2)
                .addGap(52, 52, 52)
                .addComponent(boton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(distribuciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boton)
                            .addComponent(jButton2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(checkBP)
                                .addGap(4, 4, 4)
                                .addComponent(checkHP)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(34, 34, 34))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(poblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(K1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed

        //Se determina si se esta usando distribucion binomial o hipergeometrica
        int lista2 = distribuciones.getSelectedIndex();

        try {
            if (lista2 == 0) {
                titulo = "Distribución Binomial";
                probabilidad = Double.parseDouble(p.getText());
                distBinomial();
            } else if (lista2 == 1) {
                limpiarMatriz();
                jtext2.setText("");
                jtext3.setText("");
                //jtext3.setVisible(false);
                k = Integer.parseInt(K1.getText());
                numeroExperimentos = Integer.parseInt(n.getText());
                Npob = Integer.parseInt(poblacion.getText());
                interruptor = obj1.Porcentaje(numeroExperimentos, Npob);
                if (interruptor == true) {
                    titulo = "Distribución Hipergeometrica";
                    hiperGeometrica();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Se ha detectado que los datos ingresados deben ser calculados con distribucion binomial");
                    //p.setText(String.valueOf(0.5));
                    x.setText("0");
                    probabilidad = obj1.calP(k, Npob);
                    distBinomial();
                }

            }
            Vaciar();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error, intentelo nuevamente");
        }


    }//GEN-LAST:event_botonActionPerformed

    public void comparacion() {
        try {
            comparacionHiper comp = new comparacionHiper();
            comp.setVisible(true);
            limpiarMatriz();
            jtext2.setText("");
            jtext3.setText("");
            //jtext3.setVisible(false);
            k = Integer.parseInt(K1.getText());
            numeroExperimentos = Integer.parseInt(n.getText());
            Npob = Integer.parseInt(poblacion.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());

            interruptor = obj1.Porcentaje(numeroExperimentos, Npob);
            if (interruptor == true) {
                //titulo = "Distribución Hipergeometrica";
                hiperGeometrica();
                x.setText("0");
                probabilidad = obj1.calP(k, Npob);
                distBinomial();
                //acumulador3+="\n"+acumulador3;
                jtext3.setText(acumulador3);
                acumulador3="";
                for (int ctn = xva1; ctn <= xv2; ctn++) {
                    comp.modelo3.addRow(new Object[]{
                        String.valueOf(ctn), String.valueOf(valorProb2[ctn]), String.valueOf(valorProb1[ctn])
                    });
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la comparacion ya que n no es mayor o igual al 20% de la población.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "No se han ingresado valores o no se han ingresado correctamente.");
        }

    }

    public void distBinomial() {
        // int lista = Lista.getSelectedIndex();
        jtext2.setText("");
        jtext3.setText("");
        //PanelTexto.setText("");
        limpiarMatriz();

        //if (lista == 0) {
        //BinomialInfinita();
        //} else if (lista == 1) {
        //BinomialInfina2();
        //} else if (lista == 2) {
        try {
            System.out.println("prueba");
            numeroExperimentos = Integer.parseInt(n.getText());
            Npob = Integer.parseInt(poblacion.getText());
            interruptor = obj.Porcentaje(numeroExperimentos, Npob);

            if (interruptor == true || Npob == 0) {
                JOptionPane.showMessageDialog(rootPane, "Se ha detectado que los datos ingresados deben ser calculados para población infinita.");
                BinomialInfinita();
            } else {
                BinomialFinita();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Revise los datos ingresados en población." );
        }

        //}
        Vaciar();

    }

    public void DistribucionLotes() {
        a = new double[numeroExperimentos + 1];
        double aux = 0;

        a[0] = valoresProb[0];
        aux = a[0];
        for (int i = 1; i <= numeroExperimentos; i++) {
            a[i] = aux + valoresProb[i];
            aux = a[i];
        }

    }

    private void Matriz() {
        intervalo = new int[numeroExperimentos + 1];

        for (int a = 0; a < numeroExperimentos + 1; a++) {
            intervalo[a] = a;
        }

        for (int ctn = xva1; ctn <= xv2; ctn++) {
            modelo1.addRow(new Object[]{
                String.valueOf(intervalo[ctn]), String.valueOf(valoresProb[ctn]), String.valueOf(100-valoresProb[ctn])
            });
        }

    }

    private void limpiarMatriz() {
        int filas = modelo1.getRowCount();
        for (int a = 0; a < filas; a++) {
            modelo1.removeRow(0);
        }
    }

    public void Matriz2() {
        disPorLotes mostrar = new disPorLotes();

    }


    private void ListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListaActionPerformed
        int lista = Lista.getSelectedIndex();

        if (lista == 0) {
            ActivarDesac(false, true, true, true, true, true, true, false, true);
        } else if (lista == 1) {
            ActivarDesac(false, true, false, false, false, true, true, false, true);
        } else if (lista == 2) {
            ActivarDesac(true, true, true, true, true, true, true, false, true);
        }
    }//GEN-LAST:event_ListaActionPerformed

    public void ActivarDesac(boolean pob, boolean n1, boolean expe, boolean x11, boolean x22, boolean prob, boolean botton, boolean lisd, boolean tx) {
        poblacion.setEnabled(pob);
        n.setEnabled(n1);
        x.setEnabled(expe);
        x1.setEnabled(x11);
        x2.setEnabled(x22);
        p.setEnabled(prob);
        boton.setEnabled(botton);
        K1.setEnabled(lisd);
        jtext2.setEnabled(tx);
        jLabel5.setVisible(tx);
    }

    private void distribucionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distribucionesActionPerformed
        int lista2 = distribuciones.getSelectedIndex();

        if (lista2 == 0) {
            Lista.setVisible(true);
            jLabel9.setText("Cálculos - población finita");
            ActivarDesac(true, true, true, true, true, true, true, false, true);
        } else if (lista2 == 1) {
            Lista.setVisible(false);
            jLabel9.setText("Distribución Hipergeometrica");
            ActivarDesac(true, true, false, true, true, false, true, true, false);
        }
    }//GEN-LAST:event_distribucionesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            DistribucionLotes();
            Dibujar2(a);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "No es posible calcular la distribución porr lotes, intentelo nuevamente.");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        comparacion();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        n.setText("");
        x.setText("");
        p.setText("");
        poblacion.setText("");
        K1.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         Asignador asignar = new Asignador();
         this.setVisible(false);
         n.setText("");
         x.setText("");
         p.setText("");
         poblacion.setText("");
         K1.setText("");
         Vaciar();
         asignar.setVisible(true);
                       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void checkBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBPActionPerformed
          
       if(checkBP.isSelected()){
           /*checkBP.setEnabled(true);
           checkHP.setEnabled(false);*/
           CompararBP();
           
       }
       else {
           /*checkBP.setEnabled(false);
           checkHP.setEnabled(true);*/
       }
    }//GEN-LAST:event_checkBPActionPerformed

    private void checkHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkHPActionPerformed
       //ComparacionPoisson comp = new ComparacionPoisson();
        
       if(checkHP.isSelected()){
           /*checkBP.setEnabled(false);
           checkHP.setEnabled(true);*/
           //comp.setVisible(true);
           CompararHP();
       }
       else{
           /*checkBP.setEnabled(true);
           checkHP.setEnabled(false);*/
       }
    }//GEN-LAST:event_checkHPActionPerformed
    
    public void CompararBP(){
        try {
            //distPoisson dist = new distPoisson();
            ComparacionPoisson comp = new ComparacionPoisson();
            comp.setVisible(true);
            limpiarMatriz();
            jtext2.setText("");
            jtext3.setText("");
            double valorProb4 [];
            
            //jtext3.setVisible(false);
            //k = Integer.parseInt(K1.getText());
            numeroExperimentos = Integer.parseInt(n.getText());
            Npob = Integer.parseInt(poblacion.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());
            probabilidad = Double.parseDouble(p.getText());
            System.out.println(probabilidad+ "....");
            distBinomial();
            ValoresPo();
            //valorProb4 = new double[numeroExperimentos+1];
            //valorProb4 = dist.calculoProbabilidad(numeroExperimentos, probabilidad);
            
                for (int ctn = xva1; ctn <= xv2; ctn++) {
                    comp.modTabB.addRow(new Object[]{
                        String.valueOf(ctn), String.valueOf(valorProb2[ctn]), String.valueOf(valorProb3[ctn])
                    });
                }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Ha ocurrido un error, intentelo de nuevo");
        }
    }
    
    public void ValoresPo(){
            distPoisson dist = new distPoisson();
            //double valorProb4 [];
            System.out.println(numeroExperimentos +".." + probabilidad);
            valorProb3 = new double[numeroExperimentos+1];
            valorProb3 = dist.calculoProbabilidad(numeroExperimentos, probabilidad);
    }
    
    public void CompararHP(){
         try {
            ComparacionPoisson comp = new ComparacionPoisson();
            comp.setVisible(true);
            limpiarMatriz();
            jtext2.setText("");
            jtext3.setText("");
            //jtext3.setVisible(false);
            k = Integer.parseInt(K1.getText());
            numeroExperimentos = Integer.parseInt(n.getText());
            Npob = Integer.parseInt(poblacion.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());

            interruptor = obj1.Porcentaje(numeroExperimentos, Npob);
            if (interruptor == true) {
                //titulo = "Distribución Hipergeometrica";
                hiperGeometrica();
               // x.setText("0");
                probabilidad = obj1.calP(k, Npob);
                System.out.println("Probabilidad " + probabilidad);
                ValoresPo();
                //acumulador3+="\n"+acumulador3;
                jtext3.setText(acumulador3);
                acumulador3="";
                for (int ctn = xva1; ctn <= xv2; ctn++) {
                    System.out.println("pruba ");
                    comp.modTabH.addRow(new Object[]{
                        String.valueOf(ctn), String.valueOf(valorProb1[ctn]), String.valueOf(valorProb3[ctn])
                    });
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la comparacion ya que n no es mayor o igual al 20% de la población.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error, intentelo nuevamente.");
        }
    }
    
    public void Dibujar(double valoresProb[]) {
        DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
        for (int re = xva1; re <= xv2; re++) {
            dtsc.setValue(valoresProb[re], "Probabilidad", String.valueOf(re));
        }
        JFreeChart grafica = ChartFactory.createBarChart(titulo, "Numero de aciertos", "Probabilidad", dtsc, PlotOrientation.VERTICAL, true, true, false);

        ChartPanel pa = new ChartPanel(grafica);
        /*add(pa);
        pa.setBounds(0, 50, 600, 300);
        panel.add(pa, BorderLayout.NORTH);*/
        pa.setMouseWheelEnabled(true);
        pa.setPreferredSize(new Dimension(600, 400));
        panel.setLayout(new BorderLayout());
        panel.add(pa, BorderLayout.NORTH);
        pack();
        //repaint();

    }

    public void Dibujar2(double valoresProb1[]) {

        double valorTolerancia = (int) tolerancia.getValue();
        double aux = 0;
        int aux2 = 0;
        disPorLotes mostrar = new disPorLotes();
        mostrar.setVisible(true);

        DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
        for (int re = xva1; re <= xv2; re++) {
            dtsc.setValue(valoresProb1[re], "Probabilidad", String.valueOf(re));
        }
        JFreeChart grafica = ChartFactory.createBarChart("Distribucion por lotes", "Numero de aciertos", "Probabilidad", dtsc, PlotOrientation.VERTICAL, true, true, false);

        ChartPanel pa = new ChartPanel(grafica);
        /*add(pa);
        pa.setBounds(0, 50, 600, 300);
        panel.add(pa, BorderLayout.NORTH);*/
        pa.setMouseWheelEnabled(true);
        pa.setPreferredSize(new Dimension(600, 400));
        mostrar.panel1.setLayout(new BorderLayout());
        mostrar.panel1.add(pa, BorderLayout.NORTH);
        pack();
        repaint();
        // Matriz2();

        intervalo = new int[numeroExperimentos + 1];
        //mostrar.setVisible(true);

        for (int i = 0; i < numeroExperimentos + 1; i++) {
            intervalo[i] = i;
        }

        for (int ctn = xva1; ctn <= xv2; ctn++) {
            mostrar.modelo2.addRow(new Object[]{
                String.valueOf(intervalo[ctn]), String.valueOf(valoresProb[ctn] / 100), String.valueOf(valoresProb[ctn]),
                String.valueOf(a[ctn] / 100), String.valueOf(a[ctn])
            });
        }

        for (int r = 0; r < a.length; r++) {
            if (a[r] <= valorTolerancia) {
                aux = a[r];
                aux2 = intervalo[r];
            }
        }
        mostrar.jlabel1.setText("El valor más cercano al tolerable es: " + aux2 + "\n con un porcentaje de: " + aux);
    }

    public void Vaciar() {
        /*n.setText("");
        x.setText("");
        p.setText("");
        poblacion.setText("");
        K1.setText("");*/
        Npob = 0;
        //numeroExperimentos = 0;
        numeroAciertos = 0;
        //probabilidad = 0;
        acumulador = "";
        acumulador2 = "";
        interruptor = false;
        //xva1 = 0;
        //xv2 = 0;
        probabilidadAcumulada = 0;
        FactorCorreccion = 0;
        Desviacion = 0;
        curtosis = 0;
        sesgo = 0;
        determinarCur = "";
        determinarSes = "";
        mediana = 0;
        media = 0;
        tipoSesgo = "";
        k = 0;
        /*for (int ctn = 0; ctn < numeroExperimentos + 1; ctn++) {
            valoresProb[ctn] = 0;
            intervalo[ctn] = 0;
        }*/

    }

    public void BinomialInfinita() {
        try {

            numeroExperimentos = Integer.parseInt(n.getText());
            numeroAciertos = Integer.parseInt(x.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());
            //probabilidad = Double.parseDouble(p.getText());
            valoresProb = new double[numeroExperimentos + 1];
            valoresProb = obj.calculoProbabilidad(numeroExperimentos, numeroAciertos, probabilidad);
            valorProb2 = new double[numeroExperimentos + 1];
            valorProb2 = obj.calculoProbabilidad(numeroExperimentos, numeroAciertos, probabilidad);

            media = obj.media(numeroExperimentos, probabilidad);
            
            curtosis = obj.Curtosis(numeroExperimentos, probabilidad);
            sesgo = obj.Sesgo(numeroExperimentos, probabilidad);
            determinarSes = obj.DetSes(sesgo);
            determinarCur = obj.DetCur(curtosis);
            tipoSesgo = obj.SesMe(media, mediana);

            Dibujar(valoresProb);

            for (int ctn = xva1; ctn <= xv2; ctn++) {
                acumulador += valoresProb[ctn] + "\n";
                probabilidadAcumulada += valoresProb[ctn];
            }
            //PanelTexto.setText(acumulador);
            Matriz();

            interruptor = obj.Porcentaje(numeroAciertos, numeroExperimentos);

            acumulador2 = "Poblacion infinita: \n"
                    + "Media: " + media
                    + "\n" + "Desviacion Estandar: " + obj.desviacionEstandar(numeroExperimentos, probabilidad)
                    + "\n" + "Probabilidad de " + numeroAciertos + ": "
                    + valoresProb[numeroAciertos] + "%" + "\n" + "Probabilidad acumulada: " + probabilidadAcumulada + "%"
                    +"\n" +"Curtosis: " + curtosis + "\n" + determinarCur + "\n" + "Sesgo: " + sesgo + "\n" + determinarSes + "\n"
                    + "Tipo de sesgo: " + tipoSesgo;
            jtext2.setText(acumulador2);
            
            Vaciar();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error!");
        }

    }

    public void BinomialInfina2() {
        try {
            numeroExperimentos = Integer.parseInt(n.getText());
            probabilidad = Double.parseDouble(p.getText());

            acumulador = "Media: " + obj.media(numeroExperimentos, probabilidad) + "\n" + "Desviacion Estandar: " + obj.desviacionEstandar(numeroExperimentos, probabilidad);
            jtext2.setText(acumulador);
            Vaciar();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ingrese correctamente los digitos.");
        }
    }

    public void BinomialFinita() {
        try {
            Npob = Integer.parseInt(poblacion.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());
            numeroExperimentos = Integer.parseInt(n.getText());
            numeroAciertos = Integer.parseInt(x.getText());
            //probabilidad = Double.parseDouble(p.getText());
            valoresProb = new double[numeroExperimentos + 1];

            //PanelTexto.setText(acumulador);
            valoresProb = obj.calculoProbabilidad(numeroExperimentos, numeroAciertos, probabilidad);
            valorProb2 = new double[numeroExperimentos + 1];
            valorProb2 = obj.calculoProbabilidad(numeroExperimentos, numeroAciertos, probabilidad);

            media = obj.media(numeroExperimentos, probabilidad);
            mediana = obj.Mediana(xva1, xv2);
            FactorCorreccion = obj.FC(Npob, numeroExperimentos);
            Desviacion = obj.desvFi(FactorCorreccion, numeroExperimentos, probabilidad);
            curtosis = obj.Curtosis(numeroExperimentos, probabilidad);
            sesgo = obj.Sesgo(numeroExperimentos, probabilidad);
            determinarSes = obj.DetSes(sesgo);
            determinarCur = obj.DetCur(curtosis);
            tipoSesgo = obj.SesMe(media, mediana);
            Matriz();
            Dibujar(valoresProb);

            for (int ctn = xva1; ctn <= xv2; ctn++) {
                acumulador += valoresProb[ctn] + "\n";
                probabilidadAcumulada += valoresProb[ctn];
            }
            //PanelTexto.setText(acumulador);

            acumulador2 = "Poblacion finita: \n" + "Media: " + media
                    + "\n" + "Factor de corrección: " + FactorCorreccion + "\n" + "Desviacion: " + Desviacion + "\n"
                    + "Curtosis: " + curtosis + "\n" + determinarCur + "\n" + "Sesgo: " + sesgo + "\n" + determinarSes + "\n"
                    + "Tipo de sesgo: " + tipoSesgo;
            jtext3.setText(acumulador2);
            acumulador3+="\n\n"+acumulador2;

            //Vaciar();
        } catch (Exception e) {
            acumulador2 = "Poblacion finita: \n" + "Media: " + obj.media(numeroExperimentos, probabilidad)
                    + "\n" + "Factor de corrección: " + FactorCorreccion + "\n" + "Desviacion: " + Desviacion + "\n"
                    + "Curtosis: " + curtosis + "\n" + determinarCur + "\n" + "Sesgo: " + sesgo + "\n" + determinarSes + "\n"
                    + "Tipo de sesgo: " + tipoSesgo;
            jtext3.setText(acumulador2);
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error al graficar!");
        }

    }

    public void hiperGeometrica() {
        try {
            Npob = Integer.parseInt(poblacion.getText());
            //k = Integer.parseInt(K1.getText());
            xva1 = Integer.parseInt(x1.getText());
            xv2 = Integer.parseInt(x2.getText());
            numeroExperimentos = Integer.parseInt(n.getText());
            //numeroAciertos = Integer.parseInt(x.getText());
            //probabilidad = Double.parseDouble(p.getText());
            valoresProb = new double[numeroExperimentos + 1];
            valorProb1 = new double[numeroExperimentos + 1];

            valoresProb = obj1.calculoProbabilidad(Npob, k, numeroExperimentos);
            valorProb1 = obj1.calculoProbabilidad(Npob, k, numeroExperimentos);

            media = obj1.media(numeroExperimentos, k, Npob);
            mediana = obj1.Mediana(xva1, xv2);
            Desviacion = obj1.desviacion(numeroExperimentos, k, Npob);
            sesgo = obj1.calSesgo(numeroExperimentos, k, Npob);
            curtosis = obj1.calCurtosis(numeroExperimentos, k, Npob);
            tipoSesgo = obj.SesMe(media, mediana);
            determinarSes = obj.DetSes(sesgo);
            determinarCur = obj.DetCur(curtosis);

            Matriz();
            Dibujar(valoresProb);

            acumulador2 = "Distribución Hipergeométrica: \n " + "Media: " + media + "\n" + "Desviacion: " + Desviacion + "\n"
                    + "Curtosis: " + curtosis + "\n" + determinarCur+ "\n" + "Sesgo: " + sesgo + "\n" + determinarSes+ "\n"
                    + "Tipo de sesgo: " + tipoSesgo;
            jtext3.setText(acumulador2);
            acumulador3+=acumulador2;

            //Vaciar();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error!");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelControl().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField K1;
    private javax.swing.JComboBox<String> Lista;
    private javax.swing.JTable Tabla1;
    private javax.swing.JButton boton;
    private javax.swing.JCheckBox checkBP;
    private javax.swing.JCheckBox checkHP;
    private javax.swing.JComboBox<String> distribuciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jtext2;
    private javax.swing.JTextArea jtext3;
    public static javax.swing.JTextField n;
    public static javax.swing.JTextField p;
    private javax.swing.JPanel panel;
    public static javax.swing.JTextField poblacion;
    private javax.swing.JSpinner tolerancia;
    private javax.swing.JTextField x;
    private javax.swing.JTextField x1;
    private javax.swing.JTextField x2;
    // End of variables declaration//GEN-END:variables
}
